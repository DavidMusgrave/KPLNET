// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aws.Kinesis.Protobuf {

  /// <summary>Holder for reflection information generated from config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb25maWcucHJvdG8SFGF3cy5raW5lc2lzLnByb3RvYnVmIkYKE0FkZGl0",
            "aW9uYWxEaW1lbnNpb24SCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJEhMK",
            "C2dyYW51bGFyaXR5GAMgASgJIuYFCg1Db25maWd1cmF0aW9uEkoKFmFkZGl0",
            "aW9uYWxfbWV0cmljX2RpbXMYgAEgAygLMikuYXdzLmtpbmVzaXMucHJvdG9i",
            "dWYuQWRkaXRpb25hbERpbWVuc2lvbhIbChNhZ2dyZWdhdGlvbl9lbmFibGVk",
            "GAEgASgIEh0KFWFnZ3JlZ2F0aW9uX21heF9jb3VudBgCIAEoBBIcChRhZ2dy",
            "ZWdhdGlvbl9tYXhfc2l6ZRgDIAEoBBIbChNjbG91ZHdhdGNoX2VuZHBvaW50",
            "GAQgASgJEhcKD2Nsb3Vkd2F0Y2hfcG9ydBgFIAEoBBIcChRjb2xsZWN0aW9u",
            "X21heF9jb3VudBgGIAEoBBIbChNjb2xsZWN0aW9uX21heF9zaXplGAcgASgE",
            "EhcKD2Nvbm5lY3RfdGltZW91dBgIIAEoBBIZChFlbmFibGVfY29yZV9kdW1w",
            "cxgJIAEoCBIZChFmYWlsX2lmX3Rocm90dGxlZBgKIAEoCBIYChBraW5lc2lz",
            "X2VuZHBvaW50GAsgASgJEhQKDGtpbmVzaXNfcG9ydBgMIAEoBBIRCglsb2df",
            "bGV2ZWwYDSABKAkSFwoPbWF4X2Nvbm5lY3Rpb25zGA4gASgEEhsKE21ldHJp",
            "Y3NfZ3JhbnVsYXJpdHkYDyABKAkSFQoNbWV0cmljc19sZXZlbBgQIAEoCRIZ",
            "ChFtZXRyaWNzX25hbWVzcGFjZRgRIAEoCRIcChRtZXRyaWNzX3VwbG9hZF9k",
            "ZWxheRgSIAEoBBIXCg9taW5fY29ubmVjdGlvbnMYEyABKAQSEgoKcmF0ZV9s",
            "aW1pdBgUIAEoBBIgChhyZWNvcmRfbWF4X2J1ZmZlcmVkX3RpbWUYFSABKAQS",
            "EgoKcmVjb3JkX3R0bBgWIAEoBBIOCgZyZWdpb24YFyABKAkSFwoPcmVxdWVz",
            "dF90aW1lb3V0GBggASgEEhoKEnZlcmlmeV9jZXJ0aWZpY2F0ZRgZIAEoCGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.AdditionalDimension), global::Aws.Kinesis.Protobuf.AdditionalDimension.Parser, new[]{ "Key", "Value", "Granularity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Configuration), global::Aws.Kinesis.Protobuf.Configuration.Parser, new[]{ "AdditionalMetricDims", "AggregationEnabled", "AggregationMaxCount", "AggregationMaxSize", "CloudwatchEndpoint", "CloudwatchPort", "CollectionMaxCount", "CollectionMaxSize", "ConnectTimeout", "EnableCoreDumps", "FailIfThrottled", "KinesisEndpoint", "KinesisPort", "LogLevel", "MaxConnections", "MetricsGranularity", "MetricsLevel", "MetricsNamespace", "MetricsUploadDelay", "MinConnections", "RateLimit", "RecordMaxBufferedTime", "RecordTtl", "Region", "RequestTimeout", "VerifyCertificate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AdditionalDimension : pb::IMessage<AdditionalDimension> {
    private static readonly pb::MessageParser<AdditionalDimension> _parser = new pb::MessageParser<AdditionalDimension>(() => new AdditionalDimension());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdditionalDimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalDimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalDimension(AdditionalDimension other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      granularity_ = other.granularity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalDimension Clone() {
      return new AdditionalDimension(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "granularity" field.</summary>
    public const int GranularityFieldNumber = 3;
    private string granularity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Granularity {
      get { return granularity_; }
      set {
        granularity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdditionalDimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdditionalDimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Granularity != other.Granularity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Granularity.Length != 0) hash ^= Granularity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Granularity.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Granularity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Granularity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Granularity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdditionalDimension other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Granularity.Length != 0) {
        Granularity = other.Granularity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Granularity = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Configuration : pb::IMessage<Configuration> {
    private static readonly pb::MessageParser<Configuration> _parser = new pb::MessageParser<Configuration>(() => new Configuration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Configuration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configuration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configuration(Configuration other) : this() {
      additionalMetricDims_ = other.additionalMetricDims_.Clone();
      aggregationEnabled_ = other.aggregationEnabled_;
      aggregationMaxCount_ = other.aggregationMaxCount_;
      aggregationMaxSize_ = other.aggregationMaxSize_;
      cloudwatchEndpoint_ = other.cloudwatchEndpoint_;
      cloudwatchPort_ = other.cloudwatchPort_;
      collectionMaxCount_ = other.collectionMaxCount_;
      collectionMaxSize_ = other.collectionMaxSize_;
      connectTimeout_ = other.connectTimeout_;
      enableCoreDumps_ = other.enableCoreDumps_;
      failIfThrottled_ = other.failIfThrottled_;
      kinesisEndpoint_ = other.kinesisEndpoint_;
      kinesisPort_ = other.kinesisPort_;
      logLevel_ = other.logLevel_;
      maxConnections_ = other.maxConnections_;
      metricsGranularity_ = other.metricsGranularity_;
      metricsLevel_ = other.metricsLevel_;
      metricsNamespace_ = other.metricsNamespace_;
      metricsUploadDelay_ = other.metricsUploadDelay_;
      minConnections_ = other.minConnections_;
      rateLimit_ = other.rateLimit_;
      recordMaxBufferedTime_ = other.recordMaxBufferedTime_;
      recordTtl_ = other.recordTtl_;
      region_ = other.region_;
      requestTimeout_ = other.requestTimeout_;
      verifyCertificate_ = other.verifyCertificate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configuration Clone() {
      return new Configuration(this);
    }

    /// <summary>Field number for the "additional_metric_dims" field.</summary>
    public const int AdditionalMetricDimsFieldNumber = 128;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.AdditionalDimension> _repeated_additionalMetricDims_codec
        = pb::FieldCodec.ForMessage(1026, global::Aws.Kinesis.Protobuf.AdditionalDimension.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.AdditionalDimension> additionalMetricDims_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.AdditionalDimension>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.AdditionalDimension> AdditionalMetricDims {
      get { return additionalMetricDims_; }
    }

    /// <summary>Field number for the "aggregation_enabled" field.</summary>
    public const int AggregationEnabledFieldNumber = 1;
    private bool aggregationEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AggregationEnabled {
      get { return aggregationEnabled_; }
      set {
        aggregationEnabled_ = value;
      }
    }

    /// <summary>Field number for the "aggregation_max_count" field.</summary>
    public const int AggregationMaxCountFieldNumber = 2;
    private ulong aggregationMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AggregationMaxCount {
      get { return aggregationMaxCount_; }
      set {
        aggregationMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "aggregation_max_size" field.</summary>
    public const int AggregationMaxSizeFieldNumber = 3;
    private ulong aggregationMaxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AggregationMaxSize {
      get { return aggregationMaxSize_; }
      set {
        aggregationMaxSize_ = value;
      }
    }

    /// <summary>Field number for the "cloudwatch_endpoint" field.</summary>
    public const int CloudwatchEndpointFieldNumber = 4;
    private string cloudwatchEndpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudwatchEndpoint {
      get { return cloudwatchEndpoint_; }
      set {
        cloudwatchEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudwatch_port" field.</summary>
    public const int CloudwatchPortFieldNumber = 5;
    private ulong cloudwatchPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CloudwatchPort {
      get { return cloudwatchPort_; }
      set {
        cloudwatchPort_ = value;
      }
    }

    /// <summary>Field number for the "collection_max_count" field.</summary>
    public const int CollectionMaxCountFieldNumber = 6;
    private ulong collectionMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollectionMaxCount {
      get { return collectionMaxCount_; }
      set {
        collectionMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "collection_max_size" field.</summary>
    public const int CollectionMaxSizeFieldNumber = 7;
    private ulong collectionMaxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollectionMaxSize {
      get { return collectionMaxSize_; }
      set {
        collectionMaxSize_ = value;
      }
    }

    /// <summary>Field number for the "connect_timeout" field.</summary>
    public const int ConnectTimeoutFieldNumber = 8;
    private ulong connectTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConnectTimeout {
      get { return connectTimeout_; }
      set {
        connectTimeout_ = value;
      }
    }

    /// <summary>Field number for the "enable_core_dumps" field.</summary>
    public const int EnableCoreDumpsFieldNumber = 9;
    private bool enableCoreDumps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableCoreDumps {
      get { return enableCoreDumps_; }
      set {
        enableCoreDumps_ = value;
      }
    }

    /// <summary>Field number for the "fail_if_throttled" field.</summary>
    public const int FailIfThrottledFieldNumber = 10;
    private bool failIfThrottled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailIfThrottled {
      get { return failIfThrottled_; }
      set {
        failIfThrottled_ = value;
      }
    }

    /// <summary>Field number for the "kinesis_endpoint" field.</summary>
    public const int KinesisEndpointFieldNumber = 11;
    private string kinesisEndpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KinesisEndpoint {
      get { return kinesisEndpoint_; }
      set {
        kinesisEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kinesis_port" field.</summary>
    public const int KinesisPortFieldNumber = 12;
    private ulong kinesisPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KinesisPort {
      get { return kinesisPort_; }
      set {
        kinesisPort_ = value;
      }
    }

    /// <summary>Field number for the "log_level" field.</summary>
    public const int LogLevelFieldNumber = 13;
    private string logLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 14;
    private ulong maxConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }

    /// <summary>Field number for the "metrics_granularity" field.</summary>
    public const int MetricsGranularityFieldNumber = 15;
    private string metricsGranularity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MetricsGranularity {
      get { return metricsGranularity_; }
      set {
        metricsGranularity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics_level" field.</summary>
    public const int MetricsLevelFieldNumber = 16;
    private string metricsLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MetricsLevel {
      get { return metricsLevel_; }
      set {
        metricsLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics_namespace" field.</summary>
    public const int MetricsNamespaceFieldNumber = 17;
    private string metricsNamespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MetricsNamespace {
      get { return metricsNamespace_; }
      set {
        metricsNamespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics_upload_delay" field.</summary>
    public const int MetricsUploadDelayFieldNumber = 18;
    private ulong metricsUploadDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MetricsUploadDelay {
      get { return metricsUploadDelay_; }
      set {
        metricsUploadDelay_ = value;
      }
    }

    /// <summary>Field number for the "min_connections" field.</summary>
    public const int MinConnectionsFieldNumber = 19;
    private ulong minConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinConnections {
      get { return minConnections_; }
      set {
        minConnections_ = value;
      }
    }

    /// <summary>Field number for the "rate_limit" field.</summary>
    public const int RateLimitFieldNumber = 20;
    private ulong rateLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RateLimit {
      get { return rateLimit_; }
      set {
        rateLimit_ = value;
      }
    }

    /// <summary>Field number for the "record_max_buffered_time" field.</summary>
    public const int RecordMaxBufferedTimeFieldNumber = 21;
    private ulong recordMaxBufferedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RecordMaxBufferedTime {
      get { return recordMaxBufferedTime_; }
      set {
        recordMaxBufferedTime_ = value;
      }
    }

    /// <summary>Field number for the "record_ttl" field.</summary>
    public const int RecordTtlFieldNumber = 22;
    private ulong recordTtl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RecordTtl {
      get { return recordTtl_; }
      set {
        recordTtl_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 23;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_timeout" field.</summary>
    public const int RequestTimeoutFieldNumber = 24;
    private ulong requestTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestTimeout {
      get { return requestTimeout_; }
      set {
        requestTimeout_ = value;
      }
    }

    /// <summary>Field number for the "verify_certificate" field.</summary>
    public const int VerifyCertificateFieldNumber = 25;
    private bool verifyCertificate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VerifyCertificate {
      get { return verifyCertificate_; }
      set {
        verifyCertificate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Configuration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Configuration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!additionalMetricDims_.Equals(other.additionalMetricDims_)) return false;
      if (AggregationEnabled != other.AggregationEnabled) return false;
      if (AggregationMaxCount != other.AggregationMaxCount) return false;
      if (AggregationMaxSize != other.AggregationMaxSize) return false;
      if (CloudwatchEndpoint != other.CloudwatchEndpoint) return false;
      if (CloudwatchPort != other.CloudwatchPort) return false;
      if (CollectionMaxCount != other.CollectionMaxCount) return false;
      if (CollectionMaxSize != other.CollectionMaxSize) return false;
      if (ConnectTimeout != other.ConnectTimeout) return false;
      if (EnableCoreDumps != other.EnableCoreDumps) return false;
      if (FailIfThrottled != other.FailIfThrottled) return false;
      if (KinesisEndpoint != other.KinesisEndpoint) return false;
      if (KinesisPort != other.KinesisPort) return false;
      if (LogLevel != other.LogLevel) return false;
      if (MaxConnections != other.MaxConnections) return false;
      if (MetricsGranularity != other.MetricsGranularity) return false;
      if (MetricsLevel != other.MetricsLevel) return false;
      if (MetricsNamespace != other.MetricsNamespace) return false;
      if (MetricsUploadDelay != other.MetricsUploadDelay) return false;
      if (MinConnections != other.MinConnections) return false;
      if (RateLimit != other.RateLimit) return false;
      if (RecordMaxBufferedTime != other.RecordMaxBufferedTime) return false;
      if (RecordTtl != other.RecordTtl) return false;
      if (Region != other.Region) return false;
      if (RequestTimeout != other.RequestTimeout) return false;
      if (VerifyCertificate != other.VerifyCertificate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= additionalMetricDims_.GetHashCode();
      if (AggregationEnabled != false) hash ^= AggregationEnabled.GetHashCode();
      if (AggregationMaxCount != 0UL) hash ^= AggregationMaxCount.GetHashCode();
      if (AggregationMaxSize != 0UL) hash ^= AggregationMaxSize.GetHashCode();
      if (CloudwatchEndpoint.Length != 0) hash ^= CloudwatchEndpoint.GetHashCode();
      if (CloudwatchPort != 0UL) hash ^= CloudwatchPort.GetHashCode();
      if (CollectionMaxCount != 0UL) hash ^= CollectionMaxCount.GetHashCode();
      if (CollectionMaxSize != 0UL) hash ^= CollectionMaxSize.GetHashCode();
      if (ConnectTimeout != 0UL) hash ^= ConnectTimeout.GetHashCode();
      if (EnableCoreDumps != false) hash ^= EnableCoreDumps.GetHashCode();
      if (FailIfThrottled != false) hash ^= FailIfThrottled.GetHashCode();
      if (KinesisEndpoint.Length != 0) hash ^= KinesisEndpoint.GetHashCode();
      if (KinesisPort != 0UL) hash ^= KinesisPort.GetHashCode();
      if (LogLevel.Length != 0) hash ^= LogLevel.GetHashCode();
      if (MaxConnections != 0UL) hash ^= MaxConnections.GetHashCode();
      if (MetricsGranularity.Length != 0) hash ^= MetricsGranularity.GetHashCode();
      if (MetricsLevel.Length != 0) hash ^= MetricsLevel.GetHashCode();
      if (MetricsNamespace.Length != 0) hash ^= MetricsNamespace.GetHashCode();
      if (MetricsUploadDelay != 0UL) hash ^= MetricsUploadDelay.GetHashCode();
      if (MinConnections != 0UL) hash ^= MinConnections.GetHashCode();
      if (RateLimit != 0UL) hash ^= RateLimit.GetHashCode();
      if (RecordMaxBufferedTime != 0UL) hash ^= RecordMaxBufferedTime.GetHashCode();
      if (RecordTtl != 0UL) hash ^= RecordTtl.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (RequestTimeout != 0UL) hash ^= RequestTimeout.GetHashCode();
      if (VerifyCertificate != false) hash ^= VerifyCertificate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AggregationEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(AggregationEnabled);
      }
      if (AggregationMaxCount != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AggregationMaxCount);
      }
      if (AggregationMaxSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AggregationMaxSize);
      }
      if (CloudwatchEndpoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CloudwatchEndpoint);
      }
      if (CloudwatchPort != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CloudwatchPort);
      }
      if (CollectionMaxCount != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CollectionMaxCount);
      }
      if (CollectionMaxSize != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(CollectionMaxSize);
      }
      if (ConnectTimeout != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ConnectTimeout);
      }
      if (EnableCoreDumps != false) {
        output.WriteRawTag(72);
        output.WriteBool(EnableCoreDumps);
      }
      if (FailIfThrottled != false) {
        output.WriteRawTag(80);
        output.WriteBool(FailIfThrottled);
      }
      if (KinesisEndpoint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(KinesisEndpoint);
      }
      if (KinesisPort != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(KinesisPort);
      }
      if (LogLevel.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LogLevel);
      }
      if (MaxConnections != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(MaxConnections);
      }
      if (MetricsGranularity.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MetricsGranularity);
      }
      if (MetricsLevel.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(MetricsLevel);
      }
      if (MetricsNamespace.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(MetricsNamespace);
      }
      if (MetricsUploadDelay != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(MetricsUploadDelay);
      }
      if (MinConnections != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(MinConnections);
      }
      if (RateLimit != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(RateLimit);
      }
      if (RecordMaxBufferedTime != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(RecordMaxBufferedTime);
      }
      if (RecordTtl != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(RecordTtl);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Region);
      }
      if (RequestTimeout != 0UL) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(RequestTimeout);
      }
      if (VerifyCertificate != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(VerifyCertificate);
      }
      additionalMetricDims_.WriteTo(output, _repeated_additionalMetricDims_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += additionalMetricDims_.CalculateSize(_repeated_additionalMetricDims_codec);
      if (AggregationEnabled != false) {
        size += 1 + 1;
      }
      if (AggregationMaxCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AggregationMaxCount);
      }
      if (AggregationMaxSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AggregationMaxSize);
      }
      if (CloudwatchEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloudwatchEndpoint);
      }
      if (CloudwatchPort != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CloudwatchPort);
      }
      if (CollectionMaxCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollectionMaxCount);
      }
      if (CollectionMaxSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollectionMaxSize);
      }
      if (ConnectTimeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConnectTimeout);
      }
      if (EnableCoreDumps != false) {
        size += 1 + 1;
      }
      if (FailIfThrottled != false) {
        size += 1 + 1;
      }
      if (KinesisEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KinesisEndpoint);
      }
      if (KinesisPort != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KinesisPort);
      }
      if (LogLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogLevel);
      }
      if (MaxConnections != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxConnections);
      }
      if (MetricsGranularity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MetricsGranularity);
      }
      if (MetricsLevel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MetricsLevel);
      }
      if (MetricsNamespace.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MetricsNamespace);
      }
      if (MetricsUploadDelay != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MetricsUploadDelay);
      }
      if (MinConnections != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MinConnections);
      }
      if (RateLimit != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RateLimit);
      }
      if (RecordMaxBufferedTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RecordMaxBufferedTime);
      }
      if (RecordTtl != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RecordTtl);
      }
      if (Region.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (RequestTimeout != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RequestTimeout);
      }
      if (VerifyCertificate != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Configuration other) {
      if (other == null) {
        return;
      }
      additionalMetricDims_.Add(other.additionalMetricDims_);
      if (other.AggregationEnabled != false) {
        AggregationEnabled = other.AggregationEnabled;
      }
      if (other.AggregationMaxCount != 0UL) {
        AggregationMaxCount = other.AggregationMaxCount;
      }
      if (other.AggregationMaxSize != 0UL) {
        AggregationMaxSize = other.AggregationMaxSize;
      }
      if (other.CloudwatchEndpoint.Length != 0) {
        CloudwatchEndpoint = other.CloudwatchEndpoint;
      }
      if (other.CloudwatchPort != 0UL) {
        CloudwatchPort = other.CloudwatchPort;
      }
      if (other.CollectionMaxCount != 0UL) {
        CollectionMaxCount = other.CollectionMaxCount;
      }
      if (other.CollectionMaxSize != 0UL) {
        CollectionMaxSize = other.CollectionMaxSize;
      }
      if (other.ConnectTimeout != 0UL) {
        ConnectTimeout = other.ConnectTimeout;
      }
      if (other.EnableCoreDumps != false) {
        EnableCoreDumps = other.EnableCoreDumps;
      }
      if (other.FailIfThrottled != false) {
        FailIfThrottled = other.FailIfThrottled;
      }
      if (other.KinesisEndpoint.Length != 0) {
        KinesisEndpoint = other.KinesisEndpoint;
      }
      if (other.KinesisPort != 0UL) {
        KinesisPort = other.KinesisPort;
      }
      if (other.LogLevel.Length != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.MaxConnections != 0UL) {
        MaxConnections = other.MaxConnections;
      }
      if (other.MetricsGranularity.Length != 0) {
        MetricsGranularity = other.MetricsGranularity;
      }
      if (other.MetricsLevel.Length != 0) {
        MetricsLevel = other.MetricsLevel;
      }
      if (other.MetricsNamespace.Length != 0) {
        MetricsNamespace = other.MetricsNamespace;
      }
      if (other.MetricsUploadDelay != 0UL) {
        MetricsUploadDelay = other.MetricsUploadDelay;
      }
      if (other.MinConnections != 0UL) {
        MinConnections = other.MinConnections;
      }
      if (other.RateLimit != 0UL) {
        RateLimit = other.RateLimit;
      }
      if (other.RecordMaxBufferedTime != 0UL) {
        RecordMaxBufferedTime = other.RecordMaxBufferedTime;
      }
      if (other.RecordTtl != 0UL) {
        RecordTtl = other.RecordTtl;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.RequestTimeout != 0UL) {
        RequestTimeout = other.RequestTimeout;
      }
      if (other.VerifyCertificate != false) {
        VerifyCertificate = other.VerifyCertificate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AggregationEnabled = input.ReadBool();
            break;
          }
          case 16: {
            AggregationMaxCount = input.ReadUInt64();
            break;
          }
          case 24: {
            AggregationMaxSize = input.ReadUInt64();
            break;
          }
          case 34: {
            CloudwatchEndpoint = input.ReadString();
            break;
          }
          case 40: {
            CloudwatchPort = input.ReadUInt64();
            break;
          }
          case 48: {
            CollectionMaxCount = input.ReadUInt64();
            break;
          }
          case 56: {
            CollectionMaxSize = input.ReadUInt64();
            break;
          }
          case 64: {
            ConnectTimeout = input.ReadUInt64();
            break;
          }
          case 72: {
            EnableCoreDumps = input.ReadBool();
            break;
          }
          case 80: {
            FailIfThrottled = input.ReadBool();
            break;
          }
          case 90: {
            KinesisEndpoint = input.ReadString();
            break;
          }
          case 96: {
            KinesisPort = input.ReadUInt64();
            break;
          }
          case 106: {
            LogLevel = input.ReadString();
            break;
          }
          case 112: {
            MaxConnections = input.ReadUInt64();
            break;
          }
          case 122: {
            MetricsGranularity = input.ReadString();
            break;
          }
          case 130: {
            MetricsLevel = input.ReadString();
            break;
          }
          case 138: {
            MetricsNamespace = input.ReadString();
            break;
          }
          case 144: {
            MetricsUploadDelay = input.ReadUInt64();
            break;
          }
          case 152: {
            MinConnections = input.ReadUInt64();
            break;
          }
          case 160: {
            RateLimit = input.ReadUInt64();
            break;
          }
          case 168: {
            RecordMaxBufferedTime = input.ReadUInt64();
            break;
          }
          case 176: {
            RecordTtl = input.ReadUInt64();
            break;
          }
          case 186: {
            Region = input.ReadString();
            break;
          }
          case 192: {
            RequestTimeout = input.ReadUInt64();
            break;
          }
          case 200: {
            VerifyCertificate = input.ReadBool();
            break;
          }
          case 1026: {
            additionalMetricDims_.AddEntriesFrom(input, _repeated_additionalMetricDims_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
