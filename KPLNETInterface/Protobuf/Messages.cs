// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aws.Kinesis.Protobuf {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIUYXdzLmtpbmVzaXMucHJvdG9idWYaDGNvbmZp",
            "Zy5wcm90byIhCgNUYWcSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIn0K",
            "BlJlY29yZBIbChNwYXJ0aXRpb25fa2V5X2luZGV4GAEgASgEEh8KF2V4cGxp",
            "Y2l0X2hhc2hfa2V5X2luZGV4GAIgASgEEgwKBGRhdGEYAyABKAwSJwoEdGFn",
            "cxgEIAMoCzIZLmF3cy5raW5lc2lzLnByb3RvYnVmLlRhZyJ/ChBBZ2dyZWdh",
            "dGVkUmVjb3JkEhsKE3BhcnRpdGlvbl9rZXlfdGFibGUYASADKAkSHwoXZXhw",
            "bGljaXRfaGFzaF9rZXlfdGFibGUYAiADKAkSLQoHcmVjb3JkcxgDIAMoCzIc",
            "LmF3cy5raW5lc2lzLnByb3RvYnVmLlJlY29yZCLmAwoHTWVzc2FnZRIKCgJp",
            "ZBgBIAEoBBIRCglzb3VyY2VfaWQYAiABKAQSNQoKcHV0X3JlY29yZBgDIAEo",
            "CzIfLmF3cy5raW5lc2lzLnByb3RvYnVmLlB1dFJlY29yZEgAEiwKBWZsdXNo",
            "GAQgASgLMhsuYXdzLmtpbmVzaXMucHJvdG9idWYuRmx1c2hIABJCChFwdXRf",
            "cmVjb3JkX3Jlc3VsdBgFIAEoCzIlLmF3cy5raW5lc2lzLnByb3RvYnVmLlB1",
            "dFJlY29yZFJlc3VsdEgAEjwKDWNvbmZpZ3VyYXRpb24YBiABKAsyIy5hd3Mu",
            "a2luZXNpcy5wcm90b2J1Zi5Db25maWd1cmF0aW9uSAASPwoPbWV0cmljc19y",
            "ZXF1ZXN0GAcgASgLMiQuYXdzLmtpbmVzaXMucHJvdG9idWYuTWV0cmljc1Jl",
            "cXVlc3RIABJBChBtZXRyaWNzX3Jlc3BvbnNlGAggASgLMiUuYXdzLmtpbmVz",
            "aXMucHJvdG9idWYuTWV0cmljc1Jlc3BvbnNlSAASPwoPc2V0X2NyZWRlbnRp",
            "YWxzGAkgASgLMiQuYXdzLmtpbmVzaXMucHJvdG9idWYuU2V0Q3JlZGVudGlh",
            "bHNIAEIQCg5hY3R1YWxfbWVzc2FnZSJgCglQdXRSZWNvcmQSEwoLc3RyZWFt",
            "X25hbWUYASABKAkSFQoNcGFydGl0aW9uX2tleRgCIAEoCRIZChFleHBsaWNp",
            "dF9oYXNoX2tleRgDIAEoCRIMCgRkYXRhGAQgASgMIhwKBUZsdXNoEhMKC3N0",
            "cmVhbV9uYW1lGAEgASgJImYKB0F0dGVtcHQSDQoFZGVsYXkYASABKA0SEAoI",
            "ZHVyYXRpb24YAiABKA0SDwoHc3VjY2VzcxgDIAEoCBISCgplcnJvcl9jb2Rl",
            "GAQgASgJEhUKDWVycm9yX21lc3NhZ2UYBSABKAkifgoPUHV0UmVjb3JkUmVz",
            "dWx0Ei8KCGF0dGVtcHRzGAEgAygLMh0uYXdzLmtpbmVzaXMucHJvdG9idWYu",
            "QXR0ZW1wdBIPCgdzdWNjZXNzGAIgASgIEhAKCHNoYXJkX2lkGAMgASgJEhcK",
            "D3NlcXVlbmNlX251bWJlchgEIAEoCSI+CgtDcmVkZW50aWFscxIMCgRha2lk",
            "GAEgASgJEhIKCnNlY3JldF9rZXkYAiABKAkSDQoFdG9rZW4YAyABKAkiXQoO",
            "U2V0Q3JlZGVudGlhbHMSEwoLZm9yX21ldHJpY3MYASABKAgSNgoLY3JlZGVu",
            "dGlhbHMYAiABKAsyIS5hd3Mua2luZXNpcy5wcm90b2J1Zi5DcmVkZW50aWFs",
            "cyInCglEaW1lbnNpb24SCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIksK",
            "BVN0YXRzEg0KBWNvdW50GAEgASgBEgsKA3N1bRgCIAEoARIMCgRtZWFuGAMg",
            "ASgBEgsKA21pbhgEIAEoARILCgNtYXgYBSABKAEiiAEKBk1ldHJpYxIMCgRu",
            "YW1lGAEgASgJEjMKCmRpbWVuc2lvbnMYAiADKAsyHy5hd3Mua2luZXNpcy5w",
            "cm90b2J1Zi5EaW1lbnNpb24SKgoFc3RhdHMYAyABKAsyGy5hd3Mua2luZXNp",
            "cy5wcm90b2J1Zi5TdGF0cxIPCgdzZWNvbmRzGAQgASgEIi8KDk1ldHJpY3NS",
            "ZXF1ZXN0EgwKBG5hbWUYASABKAkSDwoHc2Vjb25kcxgCIAEoBCJACg9NZXRy",
            "aWNzUmVzcG9uc2USLQoHbWV0cmljcxgBIAMoCzIcLmF3cy5raW5lc2lzLnBy",
            "b3RvYnVmLk1ldHJpY0IpCidjb20uYW1hem9uYXdzLmtpbmVzaXMucHJvZHVj",
            "ZXIucHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Aws.Kinesis.Protobuf.ConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Tag), global::Aws.Kinesis.Protobuf.Tag.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Record), global::Aws.Kinesis.Protobuf.Record.Parser, new[]{ "PartitionKeyIndex", "ExplicitHashKeyIndex", "Data", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.AggregatedRecord), global::Aws.Kinesis.Protobuf.AggregatedRecord.Parser, new[]{ "PartitionKeyTable", "ExplicitHashKeyTable", "Records" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Message), global::Aws.Kinesis.Protobuf.Message.Parser, new[]{ "Id", "SourceId", "PutRecord", "Flush", "PutRecordResult", "Configuration", "MetricsRequest", "MetricsResponse", "SetCredentials" }, new[]{ "ActualMessage" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.PutRecord), global::Aws.Kinesis.Protobuf.PutRecord.Parser, new[]{ "StreamName", "PartitionKey", "ExplicitHashKey", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Flush), global::Aws.Kinesis.Protobuf.Flush.Parser, new[]{ "StreamName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Attempt), global::Aws.Kinesis.Protobuf.Attempt.Parser, new[]{ "Delay", "Duration", "Success", "ErrorCode", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.PutRecordResult), global::Aws.Kinesis.Protobuf.PutRecordResult.Parser, new[]{ "Attempts", "Success", "ShardId", "SequenceNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Credentials), global::Aws.Kinesis.Protobuf.Credentials.Parser, new[]{ "Akid", "SecretKey", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.SetCredentials), global::Aws.Kinesis.Protobuf.SetCredentials.Parser, new[]{ "ForMetrics", "Credentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Dimension), global::Aws.Kinesis.Protobuf.Dimension.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Stats), global::Aws.Kinesis.Protobuf.Stats.Parser, new[]{ "Count", "Sum", "Mean", "Min", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.Metric), global::Aws.Kinesis.Protobuf.Metric.Parser, new[]{ "Name", "Dimensions", "Stats", "Seconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.MetricsRequest), global::Aws.Kinesis.Protobuf.MetricsRequest.Parser, new[]{ "Name", "Seconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aws.Kinesis.Protobuf.MetricsResponse), global::Aws.Kinesis.Protobuf.MetricsResponse.Parser, new[]{ "Metrics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Tag : pb::IMessage<Tag> {
    private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag(Tag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag Clone() {
      return new Tag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      partitionKeyIndex_ = other.partitionKeyIndex_;
      explicitHashKeyIndex_ = other.explicitHashKeyIndex_;
      data_ = other.data_;
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "partition_key_index" field.</summary>
    public const int PartitionKeyIndexFieldNumber = 1;
    private ulong partitionKeyIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartitionKeyIndex {
      get { return partitionKeyIndex_; }
      set {
        partitionKeyIndex_ = value;
      }
    }

    /// <summary>Field number for the "explicit_hash_key_index" field.</summary>
    public const int ExplicitHashKeyIndexFieldNumber = 2;
    private ulong explicitHashKeyIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExplicitHashKeyIndex {
      get { return explicitHashKeyIndex_; }
      set {
        explicitHashKeyIndex_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(34, global::Aws.Kinesis.Protobuf.Tag.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Tag> tags_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Tag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Tag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartitionKeyIndex != other.PartitionKeyIndex) return false;
      if (ExplicitHashKeyIndex != other.ExplicitHashKeyIndex) return false;
      if (Data != other.Data) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartitionKeyIndex != 0UL) hash ^= PartitionKeyIndex.GetHashCode();
      if (ExplicitHashKeyIndex != 0UL) hash ^= ExplicitHashKeyIndex.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartitionKeyIndex != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PartitionKeyIndex);
      }
      if (ExplicitHashKeyIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExplicitHashKeyIndex);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartitionKeyIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartitionKeyIndex);
      }
      if (ExplicitHashKeyIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExplicitHashKeyIndex);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.PartitionKeyIndex != 0UL) {
        PartitionKeyIndex = other.PartitionKeyIndex;
      }
      if (other.ExplicitHashKeyIndex != 0UL) {
        ExplicitHashKeyIndex = other.ExplicitHashKeyIndex;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartitionKeyIndex = input.ReadUInt64();
            break;
          }
          case 16: {
            ExplicitHashKeyIndex = input.ReadUInt64();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AggregatedRecord : pb::IMessage<AggregatedRecord> {
    private static readonly pb::MessageParser<AggregatedRecord> _parser = new pb::MessageParser<AggregatedRecord>(() => new AggregatedRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AggregatedRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedRecord(AggregatedRecord other) : this() {
      partitionKeyTable_ = other.partitionKeyTable_.Clone();
      explicitHashKeyTable_ = other.explicitHashKeyTable_.Clone();
      records_ = other.records_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedRecord Clone() {
      return new AggregatedRecord(this);
    }

    /// <summary>Field number for the "partition_key_table" field.</summary>
    public const int PartitionKeyTableFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_partitionKeyTable_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> partitionKeyTable_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PartitionKeyTable {
      get { return partitionKeyTable_; }
    }

    /// <summary>Field number for the "explicit_hash_key_table" field.</summary>
    public const int ExplicitHashKeyTableFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_explicitHashKeyTable_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> explicitHashKeyTable_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExplicitHashKeyTable {
      get { return explicitHashKeyTable_; }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(26, global::Aws.Kinesis.Protobuf.Record.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Record> records_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Record> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AggregatedRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AggregatedRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!partitionKeyTable_.Equals(other.partitionKeyTable_)) return false;
      if(!explicitHashKeyTable_.Equals(other.explicitHashKeyTable_)) return false;
      if(!records_.Equals(other.records_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= partitionKeyTable_.GetHashCode();
      hash ^= explicitHashKeyTable_.GetHashCode();
      hash ^= records_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      partitionKeyTable_.WriteTo(output, _repeated_partitionKeyTable_codec);
      explicitHashKeyTable_.WriteTo(output, _repeated_explicitHashKeyTable_codec);
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += partitionKeyTable_.CalculateSize(_repeated_partitionKeyTable_codec);
      size += explicitHashKeyTable_.CalculateSize(_repeated_explicitHashKeyTable_codec);
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AggregatedRecord other) {
      if (other == null) {
        return;
      }
      partitionKeyTable_.Add(other.partitionKeyTable_);
      explicitHashKeyTable_.Add(other.explicitHashKeyTable_);
      records_.Add(other.records_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            partitionKeyTable_.AddEntriesFrom(input, _repeated_partitionKeyTable_codec);
            break;
          }
          case 18: {
            explicitHashKeyTable_.AddEntriesFrom(input, _repeated_explicitHashKeyTable_codec);
            break;
          }
          case 26: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      sourceId_ = other.sourceId_;
      switch (other.ActualMessageCase) {
        case ActualMessageOneofCase.PutRecord:
          PutRecord = other.PutRecord.Clone();
          break;
        case ActualMessageOneofCase.Flush:
          Flush = other.Flush.Clone();
          break;
        case ActualMessageOneofCase.PutRecordResult:
          PutRecordResult = other.PutRecordResult.Clone();
          break;
        case ActualMessageOneofCase.Configuration:
          Configuration = other.Configuration.Clone();
          break;
        case ActualMessageOneofCase.MetricsRequest:
          MetricsRequest = other.MetricsRequest.Clone();
          break;
        case ActualMessageOneofCase.MetricsResponse:
          MetricsResponse = other.MetricsResponse.Clone();
          break;
        case ActualMessageOneofCase.SetCredentials:
          SetCredentials = other.SetCredentials.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "source_id" field.</summary>
    public const int SourceIdFieldNumber = 2;
    private ulong sourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = value;
      }
    }

    /// <summary>Field number for the "put_record" field.</summary>
    public const int PutRecordFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.PutRecord PutRecord {
      get { return actualMessageCase_ == ActualMessageOneofCase.PutRecord ? (global::Aws.Kinesis.Protobuf.PutRecord) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.PutRecord;
      }
    }

    /// <summary>Field number for the "flush" field.</summary>
    public const int FlushFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.Flush Flush {
      get { return actualMessageCase_ == ActualMessageOneofCase.Flush ? (global::Aws.Kinesis.Protobuf.Flush) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.Flush;
      }
    }

    /// <summary>Field number for the "put_record_result" field.</summary>
    public const int PutRecordResultFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.PutRecordResult PutRecordResult {
      get { return actualMessageCase_ == ActualMessageOneofCase.PutRecordResult ? (global::Aws.Kinesis.Protobuf.PutRecordResult) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.PutRecordResult;
      }
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.Configuration Configuration {
      get { return actualMessageCase_ == ActualMessageOneofCase.Configuration ? (global::Aws.Kinesis.Protobuf.Configuration) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.Configuration;
      }
    }

    /// <summary>Field number for the "metrics_request" field.</summary>
    public const int MetricsRequestFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.MetricsRequest MetricsRequest {
      get { return actualMessageCase_ == ActualMessageOneofCase.MetricsRequest ? (global::Aws.Kinesis.Protobuf.MetricsRequest) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.MetricsRequest;
      }
    }

    /// <summary>Field number for the "metrics_response" field.</summary>
    public const int MetricsResponseFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.MetricsResponse MetricsResponse {
      get { return actualMessageCase_ == ActualMessageOneofCase.MetricsResponse ? (global::Aws.Kinesis.Protobuf.MetricsResponse) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.MetricsResponse;
      }
    }

    /// <summary>Field number for the "set_credentials" field.</summary>
    public const int SetCredentialsFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.SetCredentials SetCredentials {
      get { return actualMessageCase_ == ActualMessageOneofCase.SetCredentials ? (global::Aws.Kinesis.Protobuf.SetCredentials) actualMessage_ : null; }
      set {
        actualMessage_ = value;
        actualMessageCase_ = value == null ? ActualMessageOneofCase.None : ActualMessageOneofCase.SetCredentials;
      }
    }

    private object actualMessage_;
    /// <summary>Enum of possible cases for the "actual_message" oneof.</summary>
    public enum ActualMessageOneofCase {
      None = 0,
      PutRecord = 3,
      Flush = 4,
      PutRecordResult = 5,
      Configuration = 6,
      MetricsRequest = 7,
      MetricsResponse = 8,
      SetCredentials = 9,
    }
    private ActualMessageOneofCase actualMessageCase_ = ActualMessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActualMessageOneofCase ActualMessageCase {
      get { return actualMessageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActualMessage() {
      actualMessageCase_ = ActualMessageOneofCase.None;
      actualMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SourceId != other.SourceId) return false;
      if (!object.Equals(PutRecord, other.PutRecord)) return false;
      if (!object.Equals(Flush, other.Flush)) return false;
      if (!object.Equals(PutRecordResult, other.PutRecordResult)) return false;
      if (!object.Equals(Configuration, other.Configuration)) return false;
      if (!object.Equals(MetricsRequest, other.MetricsRequest)) return false;
      if (!object.Equals(MetricsResponse, other.MetricsResponse)) return false;
      if (!object.Equals(SetCredentials, other.SetCredentials)) return false;
      if (ActualMessageCase != other.ActualMessageCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (SourceId != 0UL) hash ^= SourceId.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecord) hash ^= PutRecord.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.Flush) hash ^= Flush.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecordResult) hash ^= PutRecordResult.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.Configuration) hash ^= Configuration.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsRequest) hash ^= MetricsRequest.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsResponse) hash ^= MetricsResponse.GetHashCode();
      if (actualMessageCase_ == ActualMessageOneofCase.SetCredentials) hash ^= SetCredentials.GetHashCode();
      hash ^= (int) actualMessageCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (SourceId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SourceId);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecord) {
        output.WriteRawTag(26);
        output.WriteMessage(PutRecord);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.Flush) {
        output.WriteRawTag(34);
        output.WriteMessage(Flush);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecordResult) {
        output.WriteRawTag(42);
        output.WriteMessage(PutRecordResult);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.Configuration) {
        output.WriteRawTag(50);
        output.WriteMessage(Configuration);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsRequest) {
        output.WriteRawTag(58);
        output.WriteMessage(MetricsRequest);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(MetricsResponse);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.SetCredentials) {
        output.WriteRawTag(74);
        output.WriteMessage(SetCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (SourceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceId);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutRecord);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.Flush) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flush);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.PutRecordResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutRecordResult);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.Configuration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricsRequest);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.MetricsResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricsResponse);
      }
      if (actualMessageCase_ == ActualMessageOneofCase.SetCredentials) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.SourceId != 0UL) {
        SourceId = other.SourceId;
      }
      switch (other.ActualMessageCase) {
        case ActualMessageOneofCase.PutRecord:
          PutRecord = other.PutRecord;
          break;
        case ActualMessageOneofCase.Flush:
          Flush = other.Flush;
          break;
        case ActualMessageOneofCase.PutRecordResult:
          PutRecordResult = other.PutRecordResult;
          break;
        case ActualMessageOneofCase.Configuration:
          Configuration = other.Configuration;
          break;
        case ActualMessageOneofCase.MetricsRequest:
          MetricsRequest = other.MetricsRequest;
          break;
        case ActualMessageOneofCase.MetricsResponse:
          MetricsResponse = other.MetricsResponse;
          break;
        case ActualMessageOneofCase.SetCredentials:
          SetCredentials = other.SetCredentials;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SourceId = input.ReadUInt64();
            break;
          }
          case 26: {
            global::Aws.Kinesis.Protobuf.PutRecord subBuilder = new global::Aws.Kinesis.Protobuf.PutRecord();
            if (actualMessageCase_ == ActualMessageOneofCase.PutRecord) {
              subBuilder.MergeFrom(PutRecord);
            }
            input.ReadMessage(subBuilder);
            PutRecord = subBuilder;
            break;
          }
          case 34: {
            global::Aws.Kinesis.Protobuf.Flush subBuilder = new global::Aws.Kinesis.Protobuf.Flush();
            if (actualMessageCase_ == ActualMessageOneofCase.Flush) {
              subBuilder.MergeFrom(Flush);
            }
            input.ReadMessage(subBuilder);
            Flush = subBuilder;
            break;
          }
          case 42: {
            global::Aws.Kinesis.Protobuf.PutRecordResult subBuilder = new global::Aws.Kinesis.Protobuf.PutRecordResult();
            if (actualMessageCase_ == ActualMessageOneofCase.PutRecordResult) {
              subBuilder.MergeFrom(PutRecordResult);
            }
            input.ReadMessage(subBuilder);
            PutRecordResult = subBuilder;
            break;
          }
          case 50: {
            global::Aws.Kinesis.Protobuf.Configuration subBuilder = new global::Aws.Kinesis.Protobuf.Configuration();
            if (actualMessageCase_ == ActualMessageOneofCase.Configuration) {
              subBuilder.MergeFrom(Configuration);
            }
            input.ReadMessage(subBuilder);
            Configuration = subBuilder;
            break;
          }
          case 58: {
            global::Aws.Kinesis.Protobuf.MetricsRequest subBuilder = new global::Aws.Kinesis.Protobuf.MetricsRequest();
            if (actualMessageCase_ == ActualMessageOneofCase.MetricsRequest) {
              subBuilder.MergeFrom(MetricsRequest);
            }
            input.ReadMessage(subBuilder);
            MetricsRequest = subBuilder;
            break;
          }
          case 66: {
            global::Aws.Kinesis.Protobuf.MetricsResponse subBuilder = new global::Aws.Kinesis.Protobuf.MetricsResponse();
            if (actualMessageCase_ == ActualMessageOneofCase.MetricsResponse) {
              subBuilder.MergeFrom(MetricsResponse);
            }
            input.ReadMessage(subBuilder);
            MetricsResponse = subBuilder;
            break;
          }
          case 74: {
            global::Aws.Kinesis.Protobuf.SetCredentials subBuilder = new global::Aws.Kinesis.Protobuf.SetCredentials();
            if (actualMessageCase_ == ActualMessageOneofCase.SetCredentials) {
              subBuilder.MergeFrom(SetCredentials);
            }
            input.ReadMessage(subBuilder);
            SetCredentials = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutRecord : pb::IMessage<PutRecord> {
    private static readonly pb::MessageParser<PutRecord> _parser = new pb::MessageParser<PutRecord>(() => new PutRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecord(PutRecord other) : this() {
      streamName_ = other.streamName_;
      partitionKey_ = other.partitionKey_;
      explicitHashKey_ = other.explicitHashKey_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecord Clone() {
      return new PutRecord(this);
    }

    /// <summary>Field number for the "stream_name" field.</summary>
    public const int StreamNameFieldNumber = 1;
    private string streamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamName {
      get { return streamName_; }
      set {
        streamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partition_key" field.</summary>
    public const int PartitionKeyFieldNumber = 2;
    private string partitionKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartitionKey {
      get { return partitionKey_; }
      set {
        partitionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explicit_hash_key" field.</summary>
    public const int ExplicitHashKeyFieldNumber = 3;
    private string explicitHashKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplicitHashKey {
      get { return explicitHashKey_; }
      set {
        explicitHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamName != other.StreamName) return false;
      if (PartitionKey != other.PartitionKey) return false;
      if (ExplicitHashKey != other.ExplicitHashKey) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamName.Length != 0) hash ^= StreamName.GetHashCode();
      if (PartitionKey.Length != 0) hash ^= PartitionKey.GetHashCode();
      if (ExplicitHashKey.Length != 0) hash ^= ExplicitHashKey.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamName);
      }
      if (PartitionKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartitionKey);
      }
      if (ExplicitHashKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExplicitHashKey);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamName);
      }
      if (PartitionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartitionKey);
      }
      if (ExplicitHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExplicitHashKey);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutRecord other) {
      if (other == null) {
        return;
      }
      if (other.StreamName.Length != 0) {
        StreamName = other.StreamName;
      }
      if (other.PartitionKey.Length != 0) {
        PartitionKey = other.PartitionKey;
      }
      if (other.ExplicitHashKey.Length != 0) {
        ExplicitHashKey = other.ExplicitHashKey;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamName = input.ReadString();
            break;
          }
          case 18: {
            PartitionKey = input.ReadString();
            break;
          }
          case 26: {
            ExplicitHashKey = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Flush : pb::IMessage<Flush> {
    private static readonly pb::MessageParser<Flush> _parser = new pb::MessageParser<Flush>(() => new Flush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flush(Flush other) : this() {
      streamName_ = other.streamName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flush Clone() {
      return new Flush(this);
    }

    /// <summary>Field number for the "stream_name" field.</summary>
    public const int StreamNameFieldNumber = 1;
    private string streamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamName {
      get { return streamName_; }
      set {
        streamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamName != other.StreamName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamName.Length != 0) hash ^= StreamName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flush other) {
      if (other == null) {
        return;
      }
      if (other.StreamName.Length != 0) {
        StreamName = other.StreamName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Attempt : pb::IMessage<Attempt> {
    private static readonly pb::MessageParser<Attempt> _parser = new pb::MessageParser<Attempt>(() => new Attempt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attempt(Attempt other) : this() {
      delay_ = other.delay_;
      duration_ = other.duration_;
      success_ = other.success_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attempt Clone() {
      return new Attempt(this);
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 1;
    private uint delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 4;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 5;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Delay != other.Delay) return false;
      if (Duration != other.Duration) return false;
      if (Success != other.Success) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Delay != 0) hash ^= Delay.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Delay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Delay);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ErrorMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Delay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attempt other) {
      if (other == null) {
        return;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Delay = input.ReadUInt32();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 34: {
            ErrorCode = input.ReadString();
            break;
          }
          case 42: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutRecordResult : pb::IMessage<PutRecordResult> {
    private static readonly pb::MessageParser<PutRecordResult> _parser = new pb::MessageParser<PutRecordResult>(() => new PutRecordResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutRecordResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecordResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecordResult(PutRecordResult other) : this() {
      attempts_ = other.attempts_.Clone();
      success_ = other.success_;
      shardId_ = other.shardId_;
      sequenceNumber_ = other.sequenceNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRecordResult Clone() {
      return new PutRecordResult(this);
    }

    /// <summary>Field number for the "attempts" field.</summary>
    public const int AttemptsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.Attempt> _repeated_attempts_codec
        = pb::FieldCodec.ForMessage(10, global::Aws.Kinesis.Protobuf.Attempt.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Attempt> attempts_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Attempt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Attempt> Attempts {
      get { return attempts_; }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "shard_id" field.</summary>
    public const int ShardIdFieldNumber = 3;
    private string shardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardId {
      get { return shardId_; }
      set {
        shardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 4;
    private string sequenceNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutRecordResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutRecordResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attempts_.Equals(other.attempts_)) return false;
      if (Success != other.Success) return false;
      if (ShardId != other.ShardId) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attempts_.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ShardId.Length != 0) hash ^= ShardId.GetHashCode();
      if (SequenceNumber.Length != 0) hash ^= SequenceNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attempts_.WriteTo(output, _repeated_attempts_codec);
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ShardId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShardId);
      }
      if (SequenceNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SequenceNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attempts_.CalculateSize(_repeated_attempts_codec);
      if (Success != false) {
        size += 1 + 1;
      }
      if (ShardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardId);
      }
      if (SequenceNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutRecordResult other) {
      if (other == null) {
        return;
      }
      attempts_.Add(other.attempts_);
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ShardId.Length != 0) {
        ShardId = other.ShardId;
      }
      if (other.SequenceNumber.Length != 0) {
        SequenceNumber = other.SequenceNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attempts_.AddEntriesFrom(input, _repeated_attempts_codec);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ShardId = input.ReadString();
            break;
          }
          case 34: {
            SequenceNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Credentials : pb::IMessage<Credentials> {
    private static readonly pb::MessageParser<Credentials> _parser = new pb::MessageParser<Credentials>(() => new Credentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Credentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials(Credentials other) : this() {
      akid_ = other.akid_;
      secretKey_ = other.secretKey_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials Clone() {
      return new Credentials(this);
    }

    /// <summary>Field number for the "akid" field.</summary>
    public const int AkidFieldNumber = 1;
    private string akid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Akid {
      get { return akid_; }
      set {
        akid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret_key" field.</summary>
    public const int SecretKeyFieldNumber = 2;
    private string secretKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecretKey {
      get { return secretKey_; }
      set {
        secretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Credentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Credentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Akid != other.Akid) return false;
      if (SecretKey != other.SecretKey) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Akid.Length != 0) hash ^= Akid.GetHashCode();
      if (SecretKey.Length != 0) hash ^= SecretKey.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Akid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Akid);
      }
      if (SecretKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecretKey);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Akid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Akid);
      }
      if (SecretKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretKey);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Credentials other) {
      if (other == null) {
        return;
      }
      if (other.Akid.Length != 0) {
        Akid = other.Akid;
      }
      if (other.SecretKey.Length != 0) {
        SecretKey = other.SecretKey;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Akid = input.ReadString();
            break;
          }
          case 18: {
            SecretKey = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetCredentials : pb::IMessage<SetCredentials> {
    private static readonly pb::MessageParser<SetCredentials> _parser = new pb::MessageParser<SetCredentials>(() => new SetCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCredentials(SetCredentials other) : this() {
      forMetrics_ = other.forMetrics_;
      Credentials = other.credentials_ != null ? other.Credentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCredentials Clone() {
      return new SetCredentials(this);
    }

    /// <summary>Field number for the "for_metrics" field.</summary>
    public const int ForMetricsFieldNumber = 1;
    private bool forMetrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForMetrics {
      get { return forMetrics_; }
      set {
        forMetrics_ = value;
      }
    }

    /// <summary>Field number for the "credentials" field.</summary>
    public const int CredentialsFieldNumber = 2;
    private global::Aws.Kinesis.Protobuf.Credentials credentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.Credentials Credentials {
      get { return credentials_; }
      set {
        credentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ForMetrics != other.ForMetrics) return false;
      if (!object.Equals(Credentials, other.Credentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ForMetrics != false) hash ^= ForMetrics.GetHashCode();
      if (credentials_ != null) hash ^= Credentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ForMetrics != false) {
        output.WriteRawTag(8);
        output.WriteBool(ForMetrics);
      }
      if (credentials_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Credentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ForMetrics != false) {
        size += 1 + 1;
      }
      if (credentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Credentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCredentials other) {
      if (other == null) {
        return;
      }
      if (other.ForMetrics != false) {
        ForMetrics = other.ForMetrics;
      }
      if (other.credentials_ != null) {
        if (credentials_ == null) {
          credentials_ = new global::Aws.Kinesis.Protobuf.Credentials();
        }
        Credentials.MergeFrom(other.Credentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ForMetrics = input.ReadBool();
            break;
          }
          case 18: {
            if (credentials_ == null) {
              credentials_ = new global::Aws.Kinesis.Protobuf.Credentials();
            }
            input.ReadMessage(credentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dimension : pb::IMessage<Dimension> {
    private static readonly pb::MessageParser<Dimension> _parser = new pb::MessageParser<Dimension>(() => new Dimension());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension(Dimension other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension Clone() {
      return new Dimension(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dimension other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stats : pb::IMessage<Stats> {
    private static readonly pb::MessageParser<Stats> _parser = new pb::MessageParser<Stats>(() => new Stats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats(Stats other) : this() {
      count_ = other.count_;
      sum_ = other.sum_;
      mean_ = other.mean_;
      min_ = other.min_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats Clone() {
      return new Stats(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private double count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 2;
    private double sum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 3;
    private double mean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 4;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 5;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Sum != other.Sum) return false;
      if (Mean != other.Mean) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0D) hash ^= Count.GetHashCode();
      if (Sum != 0D) hash ^= Sum.GetHashCode();
      if (Mean != 0D) hash ^= Mean.GetHashCode();
      if (Min != 0D) hash ^= Min.GetHashCode();
      if (Max != 0D) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Count);
      }
      if (Sum != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Sum);
      }
      if (Mean != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Mean);
      }
      if (Min != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0D) {
        size += 1 + 8;
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (Mean != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stats other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0D) {
        Count = other.Count;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.Mean != 0D) {
        Mean = other.Mean;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Count = input.ReadDouble();
            break;
          }
          case 17: {
            Sum = input.ReadDouble();
            break;
          }
          case 25: {
            Mean = input.ReadDouble();
            break;
          }
          case 33: {
            Min = input.ReadDouble();
            break;
          }
          case 41: {
            Max = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Metric : pb::IMessage<Metric> {
    private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric(Metric other) : this() {
      name_ = other.name_;
      dimensions_ = other.dimensions_.Clone();
      Stats = other.stats_ != null ? other.Stats.Clone() : null;
      seconds_ = other.seconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric Clone() {
      return new Metric(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.Dimension> _repeated_dimensions_codec
        = pb::FieldCodec.ForMessage(18, global::Aws.Kinesis.Protobuf.Dimension.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Dimension> dimensions_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Dimension>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Dimension> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 3;
    private global::Aws.Kinesis.Protobuf.Stats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Aws.Kinesis.Protobuf.Stats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 4;
    private ulong seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (Seconds != other.Seconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (Seconds != 0UL) hash ^= Seconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      if (stats_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Stats);
      }
      if (Seconds != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Seconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (Seconds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metric other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      dimensions_.Add(other.dimensions_);
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Aws.Kinesis.Protobuf.Stats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.Seconds != 0UL) {
        Seconds = other.Seconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            if (stats_ == null) {
              stats_ = new global::Aws.Kinesis.Protobuf.Stats();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 32: {
            Seconds = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetricsRequest : pb::IMessage<MetricsRequest> {
    private static readonly pb::MessageParser<MetricsRequest> _parser = new pb::MessageParser<MetricsRequest>(() => new MetricsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetricsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsRequest(MetricsRequest other) : this() {
      name_ = other.name_;
      seconds_ = other.seconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsRequest Clone() {
      return new MetricsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 2;
    private ulong seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetricsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetricsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Seconds != other.Seconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Seconds != 0UL) hash ^= Seconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Seconds != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Seconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Seconds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetricsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Seconds != 0UL) {
        Seconds = other.Seconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Seconds = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetricsResponse : pb::IMessage<MetricsResponse> {
    private static readonly pb::MessageParser<MetricsResponse> _parser = new pb::MessageParser<MetricsResponse>(() => new MetricsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetricsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aws.Kinesis.Protobuf.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsResponse(MetricsResponse other) : this() {
      metrics_ = other.metrics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsResponse Clone() {
      return new MetricsResponse(this);
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Aws.Kinesis.Protobuf.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(10, global::Aws.Kinesis.Protobuf.Metric.Parser);
    private readonly pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Metric> metrics_ = new pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Metric>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Aws.Kinesis.Protobuf.Metric> Metrics {
      get { return metrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetricsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetricsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!metrics_.Equals(other.metrics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= metrics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metrics_.WriteTo(output, _repeated_metrics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetricsResponse other) {
      if (other == null) {
        return;
      }
      metrics_.Add(other.metrics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
